This is how to create an AI-powered trading bot that's 100% automated and makes money. Some of the biggest hedge funds in the world are powered by algorithmic trading. Citadel, Renaissance, Two Sigma, but they're shrouded in secrecy. Why? These guys may look like your average bankers by day, but by night, they're bulk buying yachts. They're beating the market using some of the most sophisticated algorithms in the world. Channeling my inner wolf for Wall Street, I'm going to try to create my own. But what makes a good AI trading bot? Can anyone build this? Or is it just limited to hedge fundies? And does machine learning or AI even make a difference? I've been working on this for months, researching strategies, using different ML models and test coding over 600 lines of experiments. I'm going to break it down in just five steps. And it begins with building our baseline bot. Alrighty guys, so the first thing that we need to go on ahead and do is build our baseline bot. In the interest of time, I'm going to set a 15 minute timer and kick things off. The first thing that we need to go on ahead and do is create a new file. And I'm going to call this tradingbot.py. We then need to import a bunch of dependencies. The main set are going to be from a library called LumiBot, which sort of gives us a trading framework. So from LumiBot.brokers, we're going to import Alpaca. From LumiBot.backtesting, we're going to be importing Yahoo Data Backtesting from LumiBot.strategies.strategy. We're going to import strategy. So super quickly, Alpaca is going to be our broker. Yahoo Data Backtesting is going to give us our framework for backtesting. And strategy is going to be our actual trading bot. We also need one more thing, the LumiBot.traders. We're going to import trader. So why do I keep hitting the wrong keys? So that is going to give us our deployment capability if you wanted to go and run this live. And we're also going to go from date time. We're going to import date time. And then we actually need to create a couple of variables to hold our API keys because we need to get some data. So we're going to create a variable called API key. Set that to a blank string for now. We're going to create one called API secret, also a blank string, and then a base URL, also a blank string. Now we actually need to pass through a dictionary to this Alpaca broker over here. So let's create that. So I'm going to say Alpaca creds is equal to a blank dictionary. And then inside of that, we're going to create a variable called API key. And we're going to set it to our API key, which is currently blank. So we're effectively creating a dictionary key and we're setting it equal to what we've got over here. And that's because we're going to need to use it in two ways later on. So let's close that. We don't need that. Let's go and set our API secret. And then we need to determine whether or not we're going to be paper trading. So for now, we're going to paper trade because we're not dropping real cash just yet. Or maybe we will. All right. So where do we get our API key, our API secret, and our base URL? Well, if you go to an Alpaca account, you can actually go and hit view API keys. And then in this particular case, we can go and hit regenerate, generate new keys. We can then copy this key. Let's bring that over here. So we can, that's our API key. We then want our API secret. Where's it gone now? Down here on our API secret. And we also need that base URL, which is this over here. Cool. So once you go and generate it, it's going to disappear. So if you need it again, make sure you copy it, put it in a safe place. Don't share it with anyone. All right. So those are the main variables that we need already. So what we're going to do is we're going to create our broker. I'm going to set that to Alpaca and then pass through our Alpaca creds. We'll come back to that a little bit later. Okay. But let's get onto our strategy. So we're going to create a bit of a framework for our strategy. So we're going to create a new class. I'm going to call it ML strategy. Actually, we'll call it ML trader. To that, we're going to allow it to inherit from the strategy class, which we imported up here. And so this is going to form the backbone of our actual trading bot. So everything that we encapsulate in terms of our trading logic goes inside of that class. We're going to create a new function or new method. So we're going to say def initialize. I spell that I-N-I-T-I-A. Yep. Cool. All right. I'm going to pass through the same instance. Just going to set it to pass for now. And then we need the onTradingIteration function or method. Perfect. Okay. So these are called lifecycle methods. So basically, when you start up your bot, the initialize method is going to run once. The onTradingIteration is going to run every time we get a tick. So every time we get new data from our data source, we're going to be able to execute a trade or do something with it. So we're going to effectively have all of our trading logic in here, all of our setup stuff in here. Okay. That's looking good. Now, what we actually want to do is create an instance of our strategy. So let's do that. So I'm going to say strategy is equal to MLTrader. And then we actually need to pass through a couple of things to this. So the first thing that we need to do is specify a name. So I'm going to set it to MLStrat and name it whatever you like. We also need to pass through our broker, which is why we set it up already. And then eventually, we're going to be able to specify a number of parameters. So we're just going to set that to a blank dictionary for now. But eventually, we'll come back and use that. Then what we want to do is we want to actually set up our backtesting. So this is how we're going to evaluate how well we're going to be able to run our bot, or at least a guess of how well it's actually going to run. So we've got our strategy there. To our strategy, we want to pass through that Yahoo data. So Yahoo data backtesting. Then we need a start date and end date, as well as any parameters here as well. And our parameters are just going to be a blank dictionary for now. So we'll come back to that. But we actually need to create our start date and our end date. So our start date is going to be equal to datetime. So that's why we imported this datetime function up here, because it just makes it a bit easier to create datetime objects. So for now, we're just going to keep this pretty simple. We're just going to set our datetime to 2023. We're going to set it to, let's say, halfway through the month, halfway through December. And our end date is going to be the end of December. We'll say 2023, 12, 31. Beautiful. So these two start and end dates are going into our backtest. So if you wanted to go and test for longer or shorter, you can adjust these. We're going to bring this back way later once we actually go and do our final run. But that is pretty much most of the admin stuff actually now done. Inside of our initialize function, we want to create a parameter. So we're going to create a parameter called symbol. That's going to be a string. And we're going to set that equal to spy. So it's going to be the spy index for now. Then what we want to do over here is make this available as an attribute inside of our class. So we're going to say self.symbol is equal to symbol over here. To actually pass this through, when we go and initialize our strategy, we just go and create a new parameter. And we're going to set that equal to spy over here. And I'm going to copy this. Kind of a little bit of a weird way to set this up, if I'm completely honest, but it works. We also need to set self.sleepTime. So this basically dictates how frequently we're going to trade. So self.sleepTime, we're going to set this equal to 24 hours. We're not playing in the minutes here, but if you could, if you wanted to, you definitely could. I like sort of bringing it up to a high level. We also need to set self.lastTrade, or create an attribute for self.lastTrade. So this is going to capture what our last trade was. So if we want to go and undo some of our sells or undo some of our buys, we've got the ability to do that. So I've got symbol.sleepTime.lastTrade. That is looking good. Now what we want to do is let's just go and create like a baseline trade. So we're going to say if self.lastTrade equals none, then we're going to create a trade. And this is like sort of the backbone of how to actually build these trading bots. We can create an order. We're going to say order is equal to self.createOrder. And then we've got to pass through a couple of variables here. So we need to pass through first up the symbol. So we're going to say self.symbol. We then need to pass through how many of that particular symbol we want to buy. We're going to set it's 10 for now, but we're definitely going to do dynamic order pricing and position management a little bit later. We'll get to that. Okay. So we've got self.symbol. We also want to specify what type of order we want to create. So we want to buy. And then we also want to specify what type of actual order. So the order type. So whether or not we want to market a limit, whether or not we want to bracket order. I'll explain that a little bit more. Okay. So that is our order now created, but that hasn't actually executed yet. So if I went and ran this, we wouldn't actually have an order generated. So let's actually go and just pass this order. And then we'll actually be able to test it out quickly and see this working. So let's go. And how do we go and execute this order? So we can say self.submitOrder. And then pass through that order. And then just for good measure, we're going to say self.lastTrade is equal to buy because that's effectively what we've gone and done. Okay. So we've gone and done a ton of stuff. So let's go and test this out. So I'm going to say PythonTradingBot.py. And all things holding equal, we should get a back test kickoff. I am getting these weird SSL errors. You can see one right there. Let's just try that again. Sucking up our time. Not happy about this. All right. That's our back test starting. So you can see, take a look. It's all done. All right. And that is our trade created. So you can see that right down here, we've gone and created a trade. So I bought 10 SPY contracts at a price of $469.49. It went and had a total of $4,694. This is our test.
so it tells us how well we actually perform. Kind of crap right now. So we've built our baseline bot, but right now we're just randomly buying 10 units here or there. How do we make sure that we're appropriately managing our money? This brings us to part two, position sizing and limits. We are now onto position sizing and limits. So rather than just buying 10, we're gonna make this a little bit more dynamic. So let's actually go and create this. So we're gonna say def position sizing. So this is a good part of actually building a trading bot, position management, and cash management, absolutely critical. So we're gonna create our position size. And to do that, we're gonna first need to get our cash. So how much cash we've got left in our account. And if you actually go back and take a look at our trade, that green line is the cash value. So you can see it started out at 100K. And then when we went and bought, it went down to 95K. So we can get that dynamically using the self.getcash method. So we can say self.getcash. We actually need to pass through self into here. So that'll give us our cash. We then wanna go and determine what the last price was. So we can say last price is equal to self.getlastprice. And through that method, we need to pass through the symbol. So we can pass self. Is my head blocking that? I hope not. Close. Self.symbol. And then we actually wanna calculate our position size. Our position size is gonna be calculated based on a metric called cash at risk. So how much of our cash balance do we wanna risk on every trade? So we're gonna create a variable called cash at risk. It's going to be a float. And we are gonna set it initially to 0.5. So then what we can do is we can make this available as an attribute. So self.cash at risk. And we're gonna set it to cash at risk. Beautiful. And then what we can do is calculate our position sizing. We should also set it down here just so we don't forget. So we're gonna say inside of our parameters, cash at risk. Let's just put this on another line. We are gonna set that to 0.5. And again, if you want a riskier bot or a less risky bot, you can adjust this up or down to your heart's desire. All right, cool. So we're now gonna add that parameter to our parameters inside of our back test and inside of our strategy up here as well. So what we now need to do is calculate our sizing. So I'm just gonna use the formula I've kind of always used. So we're gonna say quantity is equal to our cash multiplied by our cash at risk. So that effectively determines how much of our cash balance we wanna risk, cash at risk. And then we are going to divide it by the last price. So that's gonna tell us how many units we're gonna get per amount that we wanna risk. And then we're gonna round it down to the nearest all value. Perfect. So this should give us a single quantity. So we can return our cash, our last price, and our quantity, 150. There we go. All right, cool. And we are going to dynamically set that when we actually go and place our trade. So up here, we're gonna get our cash and just copy this. We're gonna get it back by running self.positionSizing. Beautiful. And then we are going to specify that we wanna buy that many down there. Now, I like having another check. So I like going and saying, if the cash balance is greater than the last price, so that effectively means that we're not just buying when we don't have cash. Then we are going to then execute the trade. Okay, so that's looking much better now. So we've now gone and sort of started our position sizing. The other thing that I sort of wanted to do is set limits. So I always like to set a take profit and a stop loss. So I take profit effectively starts a trade, which basically sort of sets a balance. So if we're gonna hit that point, then we're automatically gonna sell. And we're gonna take some of our profit back rather than just leaving it out there in the market or willy nilly. So let's go and set this. So we can change type of order to a bracket, and then we can set a take profit by setting take profit price. And that is gonna be equal to our last price. And for now, we're gonna set it to 20%. So we ideally want it to go up by 20% to have a sufficient take profit. And we're also gonna set a stop loss price, and we're gonna set that to our last price. So this is going to need to change depending on whether or not we're placing a short order or a long order. And we'll update that in a sec as well. Once we sort of get into the nitty gritty of the algorithm, our stop loss price is going to be 5%, right? So that sort of gives us a bit of a barrier. Ideally, we're hopefully making more money than we're losing. Okay, so that is our position sizing. So if we go and run this now, we should effectively get dynamically sized trades, but we're still really gonna be executing one trades. Please no SSL error. Find if I don't have a time limit, I just sort of drag on. All right, cool, that happens. So it looked like we placed the trade. That's our next trade. Let's take a look. So take a look. So this time we went and spent 50% of our cash at risk. So we actually spent, or we actually bought 106 SPY contracts. We had a price of 469.49. The total value is 49,765. Test sheet there as well. Okay, so now we've got, that's our time, gone now. We're gonna keep cracking on because we wanna build this bot. All right, baseline bot's done, and we've set some appropriate cash management strategies in place. But so far we haven't actually done any machine learning or used any AI. This brings us to part three, getting some news. The next thing that we wanna go on ahead and do is finally get some news. So this is where we begin to get to our ML components. So the way that we're actually gonna build this up is we're going to dynamically find out what news is happening over the last three days. And then we're gonna take that news and we're gonna pass it through to a machine learning model to calculate the sentiment based on that. And so ideally we should get a good feel for where the market is going based on that news. So that means that we need two key parts. We need the news, and we're also gonna need a machine learning model. Let's start taking a look at our news first. So first things first, let's zoom back in. So we are gonna create a new method and we're gonna say def get the news. And we are gonna set that to self over here. So we need a bunch of stuff. So we actually need an API to be able to get the news back. And that is why I created these values over here because we're actually gonna get the news back directly from Alpaca. So we can go from Alpaca trade API and you can just do a pip install. I'll include a complete set of requirements in the GitHub. So from Alpaca trade API, we are going to import rest. And this means that we can go and dynamically get a bunch of stuff from the Alpaca trade API. We also need one additional thing here. So we're gonna say from a time delta, we're gonna import time delta. So this just makes it a way easier to actually calculate the difference between days and weeks and time so on. We're gonna just use that now. All right, so let's go and create an instance of our API. So we're gonna say self.API is equal to rest. And then we wanna go and set a bunch of stuff. So we need to set our base URL, which is equal to this over here. We need to set our, what else do we need? We need our API key. What's it called? Or key ID. And we also need, my head's not blocking that. We need secret. Secret key, which is this secret key. Perfect, let's paste that in. All right, cool. So now we can go and call this API to get our news. So we can effectively go self.API.getSomeNews. Where is it? Get news? Okay, yep, cool. All right, cool. So we've got news. So when we call this, we should get our news back. Now to this, we need to pass through our symbol. So we're gonna say self, these keyword arguments. Yeah, self.symbol is equal to self.symbol. We also need a start date. So start date is gonna be equal. Actually, no, it's just start. And we need an end date over here. So how do we go and calculate these? Well, because we're gonna be backtesting, we wanna get the dynamic date based on our backtest. So we can't just go and get today's date. We actually need to get the date based on when we're trading. So we can actually go and do this. And rather than just doing it right here, let's actually just go and create another method to do this. So we're gonna say self.getDates. And let's do a little magic here. So we're gonna grab today's date, which is today with respect to the backtest or to the live trading. So self.get, what is it, getDateTime. All right, and so this is gonna return the current date based on the backtest or wherever we're actually going and deploying this. Then we need to get the, we're gonna grab three days worth of news, right? So we need three days prior. So three days prior, that's a terrible variable name. Let's say three days prior. Okay, that's still not great, whatever. All right, so we're gonna say today is equal to, well, no, so three days prior is equal to today minus three days. So we can use our time delta method that we just imported in over here. And what we're gonna do is we're gonna set that equal to days equal three. So that will effectively give us three days prior because we're taking today or minusing three, math. Then what we wanna do is we wanna return today and we wanna format it as a string because that's the way that the API expects it. So we're gonna say today is equal to str.formatTime. It's like this weird set of str.today.tsml.
data get weird okay it's strft time get the feeling that there's an error there but we will soon find out okay so that's our day time and then we want to set that equal to percentage year dash percentage month dash percentage day cool so that should return a year month day as a string and then we also want to do the same thing for three days prior so we're just going to copy that and we are going to copy this weird method which doesn't seem to be doing syntax highlighting so that is effectively what we've got now so we're going to be getting today's day we're gonna get three days prior and then we're gonna return those two values then inside of our get news function we're gonna call that so we're gonna say self dot get dates and we will unpack that so we're gonna say today and then three days let's just copy this let's not write that beautiful okay so today is gonna is equal to the end because that's the end and then the start is gonna be three days prior perfect right so that is effectively what that looks like now so we've now got our symbol we've got our start and we've got our end cool so we've now got the news now we I want to do a little bit of processing on this rather than just returning it because it returns it like a jumble and I'm just going to show you how to do this so news is actually going to be equal to we're gonna loop through each values of for event in news I'm gonna say EV not electric vehicle EV dot underscore underscore dict took a ton of time to work out how to do this underscore raw and then this should be a string and then I love it when it's a nightmare to get a headline okay cool all right that should give us our news right so now we're gonna get our dates get our news and then format our news so now if we return our news return news let's actually go and call it inside of our trading loop so our trading loop is over here on trading iteration so let's say that we are going to go and initialize another trade let's actually just chuck it here so we can say news equals self dot get news underscore news this self dot get news yeah okay cool so and then let's print out our news perfect all right so now effectively when we go and run our trading loop let's go and run it we can run it by running that's weird and run it by running Python trading bot.py but you knew that all right cool again accelerer we shall see SSL error beautiful great let's try again this looks promising all right cool this is starting and what happened all right so we had an error there and it's a self get knew that we had an error I could tell let's zoom out to do it should not be double T's there you go all right let's try that string it from that time all right let's try again probably a cell I might not have saved that let's do that again okay take a look all right so that is our news so let's just wait for this pop up to go so you can see that we've now printed out our news over here open out with a whole bunch of stuff okay so we've got all of these different headlines so if you invested a thousand in Exxon Mobil when Joe Biden was elected president here's how much you have today US senators blah blah blah whole bunch of news so we've got our news but that by itself doesn't really help us make trades this brings us to part four bring in the machine learning model aka the AI we actually want to bring some ML into the mix so this is where we bring in our ML powered sentiment model so what we want to do is rather than go and write a new function I'm actually just going to sub this out so I'm going to change I get news function and I'm going to get news method and I'm going to convert that to get sentiment and all really need to do is import this from my FinBert utils utility so if you've seen a couple of my sentiment based videos on the channel before really really similar basically we're using transformers and PyTorch we're setting whether or not we're going to use CUDA or our CPU we're then taking the process AI FinBert model which is an amazing model when it comes to finance and if you actually go to the hugging face model repository you can read all about it it's a brilliant model which has been fine-tuned on finance sentiment so we're going to be using that so we're going to be passing our news to the tokenizer to the model and then what we're going to do is we're going to effectively sum it all up and then take the highest result so to that we're going to get back our probability and we are also going to get back our sentiment so let's go ahead and do that this is all extra stuff oh we don't need this I think I added that my bad also in here I included a little example so if you actually wanted to go and test this out let's actually go and test it out so over here I've got two examples so markets responded positively to the news tracers were pleasantly surprised so if we actually go and run that function so we're going to run Python FinBert utils and this will all be available inside of the github repository you can test it out as well ideally what we're going to get back is we're going to get back a sentiment so positive or negative and then the position or the actual probability so over here my head's probably blocking that let me bring it over and bring it up let me just bring it up so you can see that all right you can see that so you can see that we're getting back positive sentiment and we've also got our probability of 89.79% this tells us that we have positive sentiment if we change it negatively so traders responded negatively to the news and were pleasantly were unhappy displeased let's set a 10 minute timer let's let's try to crack on 10 minutes left all right let's go let's go so let's not screw around all right let's try this again so now we should get negative sentiment back as well as the probability hopefully and take a look we've got negative and we've got our probability all right cool so we're effectively going to be passing on news in the same way but we're going to be integrating that signal into our trading algorithm so let's actually go and bring that in first so rather than leaving it as get sentiment we are going to bring back our function so we actually need to import it up here so from finbert utils we are going to import get sentiment actually it's estimate sentiment beautiful okay so this method or this function over here is going to be used down here and we are going to get back what's the order again we're gonna get back probability and sentiment so jump back into our trading bot so over here we're going to say we're going to get back probability and sentiment and we're going to set that equal to estimate sentiment and then we're going to pass through our news into it beautiful and then we're going to take this probability and sentiment and that's what we're going to return back so now rather than running get news we're going to run get sentiment beautiful and let's print out so we're going to get our probability and we are also going to be getting back our sentiment over here so let's print out these and see how we go we're going to run our trading bot again this time we should execute the back to back test and then we should also get our sentiment back and take a look we've effectively got it so over here wait for the second one and pop up so over here you can see that we've got our sentiments in this case it is a hundred percent and we also have the fact that we have neutral sentiment so we're not going to actually trade on a neutral sentiment we actually only want to trade on strong positive or strong negative sentiment which is why we need that probability home stretch now we've got our machine learning model up and running and generating sentiment but how do we bring this into our trading strategy this brings us to part 5 integrating our trading signal but this brings us to our final segment we're actually going to bring it all together and integrate our sentiment signal in to our trading algorithm because we've brought it in we haven't actually made any decisions based on it as of yet so let's go on ahead and do that so what we're going to do is we're going to grab at this line over here and we're actually going to bring it out so we don't really care whether or not our last trade was none so we're going to get rid of that as well we're going to get rid of these two lines so really we want to be left with our order and we're going to create two different types of orders we're going to create a sell order and we're going or a buy order and a sell order so we're effectively going to short or go long so this is really good the only thing is we just need a bit of decision logic so we're going to say if the probability actually let's start with sentiment if sentiment is positive and the probability is greater than 0.999 then we're going to issue a buy order which is looking good we'd need to tab this in the only thing is if we've got an existing sell order and we the market goes positive we sort of want to cut that other one out right so we can do that pretty easily so we can say if this is why we implemented last order right if self dot last order equals equals sell then we're going to sell all of those existing positions so self dot sell all
beautiful and then we're going to issue our buy order and then we're effectively just going to replicate this so we can copy that over and bring this out perfect we're going to say elif the sentiment is negative and the probability is 0.9999 and if the last order was buy then we're going to sell all and then down here we're going to change this to a sell and then we're going to change a couple of things in this order so rather than doing a buy here we're going to convert this to a sell and we need to change our take profit and our stop loss price so i take profit this time we're going to go the other way so effectively we're subtracting our profit margin from a value of one so it's going to be 0.8 here and our take profit is going to be adding 0.05 or five percent so we're going to say this is 1.05 and i think that is it so we should effectively have our trading algorithm now up and running okay so that's looking pretty good let's actually go and test this out so let's test it out on half month and then we're going to unleash it on the full backtest period so let's clear this and we're going to run it again okay so it looks like we're making some trades looks like we made one trade what's happened there all right let's extend this out and unleash it so it looks like we did definitely made one trade at least we made a buy trade over here so we bought $49,000 worth of SPY over here looks like the market went up which is probably a good thing how much did we make off that first one so we made 5.2% not too bad considering that just sort of mimicked the market but now we want to unleash this for all time so rather than testing from 2023 we're going to set it to 2020 we're going to set the first date we're going to convert it to january the first 2020 and unleash this i'm going to save it and let's let it run okay and we've got a bunch of errors so let's go and debug this uh what's happened ml trader has no object last order did we use last order oh it should be last trade right my bad you of all the trades that were placed over a four-year backtesting period so if we could quickly take a look at the tear sheet we can see the yellow line is the spy index so effectively what you would have invested or what you would have returned if you invested in the benchmark our blue line is how our ml strategy performs so right at the start looks like we sort of went into the negative and then we sort of came back and eventually produced some pretty significant returns but then sort of crashed back down which i still think is not too bad because when you take a look at these performance metrics over here our cumulative return was 234.46 percent over four years with a compound annual growth rate of 23.8 personally i think that's actually really really good but what i'm actually going to do is i'm going to include all of the trade logs including what you're seeing on the screen right now inside of the github repo so you can go and investigate this yourself plus keep in mind the only thing that i do want to call out is this is obviously paper trading so it doesn't include commissions doesn't include fees so when you go and trade be careful out there guys so i'm showing you how to build this but when you go and deploy it it's really important to to remember that like trading live is so different to paper trading but it does give a glimpse as to what is possible with ai powered or machine learning powered trading because over here if you actually go and scroll on over we actually short sold appropriately when the market went down short sold short sold and the market was trending down so we did get a cash bump there over here we managed to get some massive performance gain so we got some short sells and we managed to bump out our our profits or our portfolio value so if you actually take a look at one point our portfolio value is 537 836 not too shabby if i do say so myself considering that that we built this pretty quickly um but that is a little bit of a breakdown in terms of the performance but all of this will be available in the github repo i'll link it in the video description below one last thing that i want to give you before you jump off and that is if you actually wanted to go and deploy this live it's really kind of cool this is the whole benefit of the lumibot framework it's three additional lines so we can connect our trader add our strategy to our trader and then effectively run all and that will run our strategy inside of our broker and all we need to do is sort of comment at our back test because we don't need that anymore catch you later
